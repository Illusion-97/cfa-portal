{"remainingRequest":"C:\\Users\\Admin stagiaire.DESKTOP-8967908\\Desktop\\Projet_CFA\\AppliCFAFront\\cfa-portal\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Admin stagiaire.DESKTOP-8967908\\Desktop\\Projet_CFA\\AppliCFAFront\\cfa-portal\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Admin stagiaire.DESKTOP-8967908\\Desktop\\Projet_CFA\\AppliCFAFront\\cfa-portal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Admin stagiaire.DESKTOP-8967908\\Desktop\\Projet_CFA\\AppliCFAFront\\cfa-portal\\src\\views\\Admin\\Crud\\Etudiant\\EtudiantDetail.vue?vue&type=template&id=2f11b5ae&","dependencies":[{"path":"C:\\Users\\Admin stagiaire.DESKTOP-8967908\\Desktop\\Projet_CFA\\AppliCFAFront\\cfa-portal\\src\\views\\Admin\\Crud\\Etudiant\\EtudiantDetail.vue","mtime":1634730602898},{"path":"C:\\Users\\Admin stagiaire.DESKTOP-8967908\\Desktop\\Projet_CFA\\AppliCFAFront\\cfa-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Admin stagiaire.DESKTOP-8967908\\Desktop\\Projet_CFA\\AppliCFAFront\\cfa-portal\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Admin stagiaire.DESKTOP-8967908\\Desktop\\Projet_CFA\\AppliCFAFront\\cfa-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Admin stagiaire.DESKTOP-8967908\\Desktop\\Projet_CFA\\AppliCFAFront\\cfa-portal\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICBfYygKICAgICAgImEiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJoNSIsCiAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgIGN1cnNvcjogInBvaW50ZXIiLAogICAgICAgICAgY29sb3I6ICJibGFjayIsCiAgICAgICAgICAidGV4dC1kZWNvcmF0aW9uIjogIm5vbmUiCiAgICAgICAgfSwKICAgICAgICBvbjogewogICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICByZXR1cm4gX3ZtLmdvQmFjaygpCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJpY29uIiwKICAgICAgICAgIGF0dHJzOiB7IGljb246IFsiZmFzIiwgImNoZXZyb24tbGVmdCJdIH0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIlxuICAgIFByZWNlZGVudFxuICAiKQogICAgICBdLAogICAgICAxCiAgICApLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMiIsIGF0dHJzOiB7IGFsaWduOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImlkZW50aXRlIiB9LCBbCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJub20iIH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgIF92bS5fcyhfdm0uZXR1ZGlhbnQudXRpbGlzYXRldXJEdG8ucHJlbm9tKSArCiAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5ldHVkaWFudC51dGlsaXNhdGV1ckR0by5ub20pCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiZW1haWwiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uZXR1ZGlhbnQudXRpbGlzYXRldXJEdG8ubG9naW4pKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMTAiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBtYi01IiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJvZmZzZXQtMSBjb2wtbWQtNCIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJiLWNhcmQiLCB7IGF0dHJzOiB7IGhlYWRlcjogIkZvcm1hdGV1ciBSw6lmw6lyZW50IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJcbiAgICAgICAgICAgICAgICAiICsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5ldHVkaWFudC5mb3JtYXRldXJSZWZlcmVudER0by5wcmVub20pICsKICAgICAgICAgICAgICAgICAgICAgICAgIlxuICAgICAgICAgICAgICAgICIgKwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmV0dWRpYW50LmZvcm1hdGV1clJlZmVyZW50RHRvLm5vbSkgKwogICAgICAgICAgICAgICAgICAgICAgICAiXG4gICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5ldHVkaWFudC5mb3JtYXRldXJSZWZlcmVudER0by5sb2dpbikpCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJvZmZzZXQtMSBjb2wtbWQtNCIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJiLWNhcmQiLCB7IGF0dHJzOiB7IGhlYWRlcjogIk1hbmFnZXIiIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIlxuICAgICAgICAgICAgICAgICIgKwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmV0dWRpYW50Lm1hbmFnZXJEdG8ucHJlbm9tKSArCiAgICAgICAgICAgICAgICAgICAgICAgICIgIiArCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uZXR1ZGlhbnQubWFuYWdlckR0by5ub20pICsKICAgICAgICAgICAgICAgICAgICAgICAgIlxuICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KF92bS5fcyhfdm0uZXR1ZGlhbnQubWFuYWdlckR0by5sb2dpbikpXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9uLWNvbnRhaW5lci10dWlsZSIgfSwgWwogICAgICBfYygKICAgICAgICAic3BhbiIsCiAgICAgICAgewogICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgbWFfdHVpbGU6IHRydWUsCiAgICAgICAgICAgIGFjdGl2OiBfdm0uaXNQcm9tb3Rpb24KICAgICAgICAgIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VtZW50T25nbGV0KDEpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIlxuICAgICAgUHJvbW90aW9uc1xuICAgICIpXQogICAgICApLAogICAgICBfYygKICAgICAgICAic3BhbiIsCiAgICAgICAgewogICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgbWFfdHVpbGU6IHRydWUsCiAgICAgICAgICAgIGFjdGl2OiBfdm0uaXNHcm91cGUKICAgICAgICAgIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VtZW50T25nbGV0KDIpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIlxuICAgICAgR3JvdXBlc1xuICAgICIpXQogICAgICApLAogICAgICBfYygKICAgICAgICAic3BhbiIsCiAgICAgICAgewogICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgbWFfdHVpbGU6IHRydWUsCiAgICAgICAgICAgIGFjdGl2OiBfdm0uaXNOb3RlCiAgICAgICAgICB9LAogICAgICAgICAgb246IHsKICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlbWVudE9uZ2xldCgzKQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbX3ZtLl92KCJcbiAgICAgIE5vdGVzXG4gICAgIildCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJzcGFuIiwKICAgICAgICB7CiAgICAgICAgICBjbGFzczogewogICAgICAgICAgICBtYV90dWlsZTogdHJ1ZSwKICAgICAgICAgICAgYWN0aXY6IF92bS5pc0Fic2VuY2UKICAgICAgICAgIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VtZW50T25nbGV0KDQpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIlxuICAgICAgQWJzZW5jZXNcbiAgICAiKV0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgInNwYW4iLAogICAgICAgIHsKICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgIG1hX3R1aWxlOiB0cnVlLAogICAgICAgICAgICBhY3RpdjogX3ZtLmlzQ29uZ2UKICAgICAgICAgIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VtZW50T25nbGV0KDUpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIlxuICAgICAgQ29uZ8Opc1xuICAgICIpXQogICAgICApCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IGNsYXNzOiB7IG1hX2ZlbmV0cmU6IHRydWUsIGNvbGxhcHNlOiAhX3ZtLmlzUHJvbW90aW9uIH0gfSwgWwogICAgICBfYygidGFibGUiLCB7IHN0YXRpY0NsYXNzOiAidGFibGUiIH0sIFsKICAgICAgICBfdm0uX20oMCksCiAgICAgICAgX2MoCiAgICAgICAgICAidGJvZHkiLAogICAgICAgICAgX3ZtLl9sKF92bS5ldHVkaWFudC5wcm9tb3Rpb25zRHRvLCBmdW5jdGlvbihwcm9tb3Rpb24pIHsKICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICJ0ciIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAga2V5OiBwcm9tb3Rpb24uaWQsCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1vbi10cjIiLAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgZGJsY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2xpY2tQcm9tb3Rpb24ocHJvbW90aW9uKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KF92bS5fcyhwcm9tb3Rpb24ubm9tKSldKSwKICAgICAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoX3ZtLl9zKHByb21vdGlvbi5kYXRlRGVidXQpKV0pLAogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdihfdm0uX3MocHJvbW90aW9uLmRhdGVGaW4pKV0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICB9KSwKICAgICAgICAgIDAKICAgICAgICApCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IGNsYXNzOiB7IG1hX2ZlbmV0cmU6IHRydWUsIGNvbGxhcHNlOiAhX3ZtLmlzR3JvdXBlIH0gfSwgWwogICAgICBfYygidGFibGUiLCB7IHN0YXRpY0NsYXNzOiAidGFibGUiIH0sIFsKICAgICAgICBfdm0uX20oMSksCiAgICAgICAgX2MoCiAgICAgICAgICAidGJvZHkiLAogICAgICAgICAgX3ZtLl9sKF92bS5ncm91cGVDb21wdXRlZCwgZnVuY3Rpb24oZ3JvdXBlKSB7CiAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAidHIiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGtleTogZ3JvdXBlLmlkLAogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtb24tdHIiLAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgZGJsY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2xpY2tHcm91cGUoZ3JvdXBlKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KF92bS5fcyhncm91cGUubm9tKSldKSwKICAgICAgICAgICAgICAgIF92bS5fbChncm91cGUuZXR1ZGlhbnRzRHRvLCBmdW5jdGlvbihldHVkaWFudCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX2MoInRkIiwgeyBrZXk6IGV0dWRpYW50LmlkIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiXG4gICAgICAgICAgICAiICsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKGV0dWRpYW50LnV0aWxpc2F0ZXVyRHRvLnByZW5vbSkgKwogICAgICAgICAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoZXR1ZGlhbnQudXRpbGlzYXRldXJEdG8ubm9tKSArCiAgICAgICAgICAgICAgICAgICAgICAgICJcbiAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDIKICAgICAgICAgICAgKQogICAgICAgICAgfSksCiAgICAgICAgICAwCiAgICAgICAgKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgeyBjbGFzczogeyBtYV9mZW5ldHJlOiB0cnVlLCBjb2xsYXBzZTogIV92bS5pc05vdGUgfSB9LCBbCiAgICAgIF9jKCJ0YWJsZSIsIHsgc3RhdGljQ2xhc3M6ICJ0YWJsZSIgfSwgWwogICAgICAgIF9jKCJ0aGVhZCIsIHt9LCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIkV4YW1lbi9EZXZvaXIiKV0pLAogICAgICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJOb3RlIildKSwKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiT2JzZXJ2YXRpb25zIildKSwKICAgICAgICAgICAgX2MoInRoIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1wcmltYXJ5IGZvbnQtd2VpZ2h0LWJvbGQgbW9uLXBsdXMiLAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY3JlYXRlTm90ZShfdm0uZXR1ZGlhbnQpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiXG4gICAgICAgICAgICAgICtcbiAgICAgICAgICAgICIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoCiAgICAgICAgICAidGJvZHkiLAogICAgICAgICAgX3ZtLl9sKF92bS5ub3Rlc0NvbXB1dGVkLCBmdW5jdGlvbihub3RlKSB7CiAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAidHIiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGtleTogbm90ZS5pZCwKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibW9uLXRyIiwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGRibGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNsaWNrTm90ZShub3RlKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgICAgIG5vdGUuZGV2b2lyRHRvCiAgICAgICAgICAgICAgICAgICAgPyBfYygic3BhbiIsIFtfdm0uX3YoX3ZtLl9zKG5vdGUuZGV2b2lyRHRvLmVub25jZSkpXSkKICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICBub3RlLmV4YW1lbkR0bwogICAgICAgICAgICAgICAgICAgID8gX2MoInNwYW4iLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3Mobm90ZS5leGFtZW5EdG8uZXhhbWVuRHRvLmVub25jZSkpCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdihfdm0uX3Mobm90ZS5ub3RlT2J0ZW51KSldKSwKICAgICAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoX3ZtLl9zKG5vdGUub2JzZXJ2YXRpb25zKSldKSwKICAgICAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xvc2UgbWEtY3JvaXgiLAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uZGVsZXRlTm90ZShub3RlLmlkKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJ4IildCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICB9KSwKICAgICAgICAgIDAKICAgICAgICApCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IGNsYXNzOiB7IG1hX2ZlbmV0cmU6IHRydWUsIGNvbGxhcHNlOiAhX3ZtLmlzQWJzZW5jZSB9IH0sIFsKICAgICAgX2MoInRhYmxlIiwgeyBzdGF0aWNDbGFzczogInRhYmxlIiB9LCBbCiAgICAgICAgX2MoInRoZWFkIiwge30sIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiRGF0ZSBkZSBkZWJ1dCIpXSksCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIkRhdGUgZGUgZmluIildKSwKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiUmFpc29uIildKSwKICAgICAgICAgICAgX2MoInRoIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1wcmltYXJ5IGZvbnQtd2VpZ2h0LWJvbGQgbW9uLXBsdXMiLAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY3JlYXRlQWJzZW5jZShfdm0uZXR1ZGlhbnQpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiXG4gICAgICAgICAgICAgICtcbiAgICAgICAgICAgICIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoCiAgICAgICAgICAidGJvZHkiLAogICAgICAgICAgX3ZtLl9sKF92bS5hYnNlbmNlc0NvbXB1dGVkLCBmdW5jdGlvbihhYnNlbmNlKSB7CiAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAidHIiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGtleTogYWJzZW5jZS5pZCwKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibW9uLXRyIiwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGRibGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNsaWNrQWJzZW5jZShhYnNlbmNlKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KF92bS5fcyhhYnNlbmNlLmRhdGVEZWJ1dCkpXSksCiAgICAgICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KF92bS5fcyhhYnNlbmNlLmRhdGVGaW4pKV0pLAogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdihfdm0uX3MoYWJzZW5jZS5qdXN0aWZpY2F0aWYpKV0pLAogICAgICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjbG9zZSBtYS1jcm9peCIsCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5kZWxldGVBYnNlbmNlKGFic2VuY2UuaWQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIngiKV0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIH0pLAogICAgICAgICAgMAogICAgICAgICkKICAgICAgXSkKICAgIF0pLAogICAgX2MoImRpdiIsIHsgY2xhc3M6IHsgbWFfZmVuZXRyZTogdHJ1ZSwgY29sbGFwc2U6ICFfdm0uaXNDb25nZSB9IH0sIFsKICAgICAgX2MoInRhYmxlIiwgeyBzdGF0aWNDbGFzczogInRhYmxlIiB9LCBbCiAgICAgICAgX2MoInRoZWFkIiwge30sIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiRGF0ZSBkZSBkZWJ1dCIpXSksCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIkRhdGUgZGUgZmluIildKSwKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiTW90aWYiKV0pLAogICAgICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJUeXBlIildKSwKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiU3RhdHVzIildKSwKICAgICAgICAgICAgX2MoInRoIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1wcmltYXJ5IGZvbnQtd2VpZ2h0LWJvbGQgbW9uLXBsdXMiLAogICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmNyZWF0ZUNvbmdlIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJcbiAgICAgICAgICAgICAgK1xuICAgICAgICAgICAgIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygKICAgICAgICAgICJ0Ym9keSIsCiAgICAgICAgICBfdm0uX2woX3ZtLmNvbmdlc0NvbXB1dGVkLCBmdW5jdGlvbihjb25nZSkgewogICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgInRyIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBrZXk6IGNvbmdlLmlkLAogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtb24tdHIiLAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgZGJsY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2xpY2tDb25nZShjb25nZSkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdihfdm0uX3MoY29uZ2UuZGF0ZURlYnV0KSldKSwKICAgICAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoX3ZtLl9zKGNvbmdlLmRhdGVGaW4pKV0pLAogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdihfdm0uX3MoY29uZ2UubW90aWYpKV0pLAogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdihfdm0uX3MoY29uZ2UudHlwZSkpXSksCiAgICAgICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KF92bS5fcyhjb25nZS5zdGF0dXMpKV0pLAogICAgICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjbG9zZSBtYS1jcm9peCIsCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5kZWxldGVDb25nZShjb25nZS5pZCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigieCIpXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgfSksCiAgICAgICAgICAwCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygidGhlYWQiLCB7fSwgWwogICAgICBfYygidHIiLCBbCiAgICAgICAgX2MoInRoIiwgW192bS5fdigiUHJvbW90aW9uIildKSwKICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJEYXRlIGRlIGRlYnV0IildKSwKICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJEYXRlIGRlIGZpbiIpXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ0aGVhZCIsIHt9LCBbCiAgICAgIF9jKCJ0ciIsIFtfYygidGgiLCBbX3ZtLl92KCJOb20iKV0pLCBfYygidGgiLCBbX3ZtLl92KCJFdHVkaWFudHMiKV0pXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}